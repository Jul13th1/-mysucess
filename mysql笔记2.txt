1.数据库的三范式有哪些？
    1.第一范式：原子性
        要求每个字段（列）都是不可分割的原子值，一个字段不能包含多个值
        每个表中的每一列必须包含单一的、不可分割的值。
        每一行的数据都是唯一的。
    2.第二范式：消除部分依赖
        表必须满足第一范式。
        任何非主键字段必须完全依赖于主键，而不能只依赖主键的一部分（这适用于复合主键的情况）。
    3.第三范式：消除传递依赖
        表必须满足第二范式。
        所有非主键字段应该直接依赖于主键，而不能通过其他非主键字段间接依赖主键。

2.SQL约束有哪几种？
    （1）NOT NULL：用于控制字段的内容一定不能为空
    （2）UNIQUE：控件字段内容不能重复，一个表中允有多个Unique约束
    （3）PRIMARY KEY: 也是用于控件字段内容不能重复，但它在一个表只允许出现一个。

3.MySQL中的varchar和char有什么区别？
    char 是一个定长字段,假如申请了char(10)的空间,那么无论实际存储多少内容.该字段都占用 10 个字符
    varchar 是变长的,也就是说申请的只是最大长度,占用的空间为实际字符长度+1,最后一个字符存储使用了多长的空间.
    在检索效率上来讲,char > varchar,因此在使用中,如果确定某个字段的值的长度,可以使用 char,否则应该尽量使用 varchar.
    原因：CHAR 类型在检索效率上的优势主要来自于它的固定长度特性，数据库系统不需要额外计算数据的实际长度或进行位置调整，可以更快地访问数据。

4.数据库事务
    数据库并发控制的基本单位，其执行的结果必须使数据库从一种一致性状态变到另一种一致性状态。
    事务是逻辑上的一组操作，要么都执行，要么都不执行。

5.事务具有的四个特征
    （1）原子性。事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做
    （2）一致性。事务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。
    （3）隔离性。一个事务的执行不能其它事务干扰。
    （4）持续性。也称永久性，指一个事务一旦提交，它对数据库中的数据的改变就应该是永久性的。

6.MySQL的四种隔离级别
    （1）Read Uncommitted（读取未提交内容）
        所有事务都可以看到其他未提交事务的执行结果，读取未提交的数据，也被称之为脏读
    （2）Read Committed（读取提交内容）
        大多数数据库系统的默认隔离级别（但不是 MySQL 默认的）
        它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别 也支持所谓 的 不可重复读，
         因为同一事务的其他实例在该实例处理其间可能会有新的 commit，所以同一 select 可能返回不同结果。
    （3）Repeatable Read（可重读）
        MySQL 的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。
        不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。
    （4）Serializable（可串行化）
        通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。
    事务隔离机制的实现基于锁机制和并发调度。其中并发调度使用的是MVVC（多版本并发控制），通过保存修改的旧版本信息来支持并发一致性读和回滚等特性。
    InnoDB 存储引擎在 分布式事务 的情况下一般会用到SERIALIZABLE(可串行化)隔离级别。

7.什么是脏读？不可重复读？幻读？
    （1）脏读：事务 A 读取了事务 B 更新的数据，然后 B 回滚操作，那么 A 读取到的数据是脏数据
    （2）不可重复读：事务 A 多次读取同一数据，事务 B 在事务 A 多次读取的过程中，对数据作了更新并提交，导致事务 A 多次读取同一数据时，结果 不一致。
    （3）幻读：系统管理员 A 将数据库中所有学生的成绩从具体分数改为 ABCDE 等级，但是系统管理员 B 就在这个时候插入了一条具体分数的记录，当系统管理员 A
            改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。
        总结：  
            脏读是一个事务回滚影响另外一个事务。
            不可重复度侧重于修改
            幻读侧重于新增或删除

8.事务的实现原理
    事务是基于重做日志系统（redolog）和回滚日志（undo log）实现的
    （1）每提交一个事务必须先将该事物的所有日志写入到重做日志文件进行持久化，数据库就可以通过重做日志来保证事务的原子性和持久性。
    （2）每当有修改事务时，还会产生 undo log，如果需要回滚，则根据 undo log 的反向语句进行逻辑操作，比如 insert 一条记录就 delete 一条记录。undo log 主要实现数据库的一致性。

9.MySQL事务日志介绍下？
    innodb 事务日志包括 redo log 和 undo log。
    undo log 指事务开始之前，在操作任何数据之前，首先将需操作的数据备份到一个地方。redo log 指事务中操作的任何数据，将最新的数据备份到一个地方。
    事务日志的目的：实例或者介质失败，事务日志文件就能派上用场。
        （1）重做日志系统（redolog）
            redo log 不是随着事务的提交才写入的，而是在事务的执行过程中，便开始写入 redo 中。
            防止在发生故障的时间点，尚有脏页未写入磁盘，在重启 MySQL 服务的时候，根据 redo log 进行重做，从而达到事务的未入磁盘数据进行持久化这一特性。
        （2）回滚日志（undo log）
            undo log 用来回滚行记录到某个版本。事务未提交之前，Undo 保存了未提交之前的版本数据，Undo 中的数据可作为数据旧版本快照供其他并发事务进行快照读。
            是为了实现事务的原子性而出现的产物,在 MySQL innodb 存储引擎中用来实现多版本并发控制。

10.什么是MySQL的 binlog？
    binlog 是记录所有数据库表结构变更（例如 CREATE、ALTER TABLE）以及表数据修改（INSERT、UPDATE、DELETE）的二进制日志。
    binlog 不会记录 SELECT 和 SHOW 这类操作，因为这类操作对数据本身并没有修改，但你可以通过查询通用日志来查看 MySQL 执行过的所有语句。
    1、MySQL binlog 以事件形式记录，还包含语句所执行的消耗的时间，MySQL 的二进制日志是事务安全型的。binlog 的主要目的是复制和恢复。
        （1）数据恢复：如果数据库发生故障，可以通过 binlog 恢复丢失的数据，尤其是在进行备份恢复后，binlog 可以用于补充从备份创建后发生的所有修改。
        （2）主从复制：MySQL 的主从复制架构依赖 binlog。主服务器将其所有修改操作写入 binlog，从服务器则从 binlog 中读取这些事件并按顺序执行，以确保主从数据库的数据一致性。
        （3）审计与追踪：binlog 记录了数据库的所有变更操作，可以用于审计或分析数据库的操作历史。
    2、工作原理：
        （1）当有客户端执行数据修改操作时（例如INSERT、IPDATE、DELETE），MySQL会将这些操作记录到binlog文件中。
        （2）这些事件会按照顺序被写入到binlog文件，MySQL会持续地追加新的事件到binlog文件的末尾
        （3）主服务器在执行数据库修改操作时，会将对应的操作写入binlog
        （4）从服务器从binlog中读取并执行这些事件，使得主从数据库保持一致
    3、binlog 有三种格式，各有优缺点：
        （1）Statement-Based Replication (SBR)：
            在这种模式下，binlog 记录的是 SQL 语句。这意味着它记录的是执行了哪些 SQL 语句（如 INSERT、UPDATE、DELETE），而不关心这些语句的执行结果。
            示例：INSERT INTO users (id, name) VALUES (1, 'John');
        （2）Row-Based Replication (RBR)：
            在这种模式下，binlog 记录的是实际更改的数据行。也就是说，记录了每一行数据的变化，而不是 SQL 语句。
            示例：记录一行数据的变化，例如某个 users 表中某一行数据的 name 字段从 John 改成了 Mike。
        （3）Mixed-Based Replication (MBR)：
            混合模式结合了 SBR 和 RBR。MySQL 根据语句的性质自动选择使用哪种模式。
            例如，对于 UPDATE 语句，如果涉及多行操作，可能会使用行复制；如果是单行操作，则可能使用语句复制。
    4、binlog的作用和使用场景
        （1）主从复制
            主服务器记录所有的变更操作到 binlog 文件中，从服务器通过读取 binlog 文件来同步数据。
            主从复制通过 binlog 实现数据的同步，确保主从服务器数据的一致性。
        （2）数据恢复与恢复增量备份：
            恢复时，可以通过 binlog 文件来恢复备份后的增量数据，避免遗漏。
            例如，在恢复备份后，可以通过 mysqlbinlog 工具将 binlog 文件应用到数据库，以恢复备份时间点之后的所有变更。
        （3）数据审计与监控：
            binlog 记录了数据库的所有数据变更操作，因此可以用来审计数据库的操作历史，跟踪谁在什么时候对数据库进行了哪些修改。
            通过分析 binlog，管理员可以查看哪些用户执行了哪些 SQL 语句，或者某一特定数据项被修改的历史。
            

